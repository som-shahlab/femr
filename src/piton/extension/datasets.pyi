from typing import List, Optional

import piton.extension

class Dictionary:
    def __init__(self, *args, **kwargs) -> None: ...
    def find(self, arg0: str) -> Optional[int]: ...
    def values(self) -> List[str]: ...
    def __getitem__(self, arg0: int) -> memoryview: ...
    def __len__(self) -> int: ...

class Ontology:
    def __init__(self, *args, **kwargs) -> None: ...
    def get_all_parents(self, arg0: int) -> piton.extension.IntSpan: ...
    def get_children(self, arg0: int) -> piton.extension.IntSpan: ...
    def get_dictionary(self) -> Dictionary: ...
    def get_parents(self, arg0: int) -> piton.extension.IntSpan: ...

class PatientDatabase:
    def __init__(self, filename: str, read_all: bool = ...) -> None: ...
    def close(self) -> None: ...
    def get_code_count(self, arg0: int) -> int: ...
    def get_code_dictionary(self) -> Dictionary: ...
    def get_ontology(self) -> Ontology: ...
    def get_original_patient_id(self, arg0: int) -> int: ...
    def get_patient_id_from_original(self, arg0: int) -> Optional[int]: ...
    def get_shared_text_count(self, arg0: int) -> int: ...
    def get_shared_text_dictionary(self) -> Dictionary: ...
    def get_unique_text_dictionary(self) -> Dictionary: ...
    def __getitem__(self, arg0: int) -> object: ...
    def __len__(self) -> int: ...

def convert_patient_collection_to_patient_database(arg0, arg1, arg2, arg3: str, arg4: int) -> PatientDatabase: ...
def sort_and_join_csvs(arg0, arg1, arg2: List[str], arg3: str, arg4: int) -> None: ...
