import collections.abc
import datetime
from typing import List, Optional

import numpy as np

import femr.extension

class Dictionary(collections.abc.Sequence):
    def __init__(self, *args, **kwargs) -> None: ...
    def index(self, arg0: str) -> int: ...
    def __getitem__(self, arg0: int) -> memoryview: ...
    def __len__(self) -> int: ...

class Ontology:
    def __init__(self, *args, **kwargs) -> None: ...
    def get_all_parents(self, arg0: int) -> femr.extension.IntSpan: ...
    def get_children(self, arg0: int) -> femr.extension.IntSpan: ...
    def get_dictionary(
        self,
    ) -> Dictionary: ...  # [idx] = int, [value] = OMOP code
    def get_parents(self, arg0: int) -> femr.extension.IntSpan: ...

class PatientDatabase(collections.abc.Sequence):
    def __init__(self, filename: str, read_all: bool = ...) -> None: ...
    def close(self) -> None: ...
    def get_patient_birth_date(self, arg: int) -> datetime.datetime: ...
    def get_code_count(self, arg0: int) -> int: ...
    def get_code_dictionary(self) -> Dictionary: ...
    def get_ontology(self) -> Ontology: ...
    def get_text_count(self, arg0: str) -> int: ...
    def __getitem__(self, arg0: int) -> object: ...
    def __len__(self) -> int: ...

def convert_patient_collection_to_patient_database(arg0, arg1, arg2, arg3: str, arg4: int) -> PatientDatabase: ...
def sort_and_join_csvs(arg0, arg1, arg2: List[str] | np.dtype, arg3: str, arg4: int) -> None: ...
